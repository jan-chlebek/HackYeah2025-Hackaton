// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UknfCommunicationPlatform.Infrastructure.Data;

#nullable disable

namespace UknfCommunicationPlatform.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251004231214_RemoveUnnecessaryFileColumns")]
    partial class RemoveUnnecessaryFileColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_announcements");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("i_x_announcements_created_by_user_id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("i_x_announcements_expires_at");

                    b.HasIndex("IsPublished", "PublishedAt")
                        .HasDatabaseName("i_x_announcements_is_published_published_at");

                    b.ToTable("announcements", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AnnouncementAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint")
                        .HasColumnName("announcement_id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id")
                        .HasName("p_k_announcement_attachments");

                    b.HasIndex("AnnouncementId")
                        .HasDatabaseName("i_x_announcement_attachments_announcement_id");

                    b.ToTable("announcement_attachments", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AnnouncementHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint")
                        .HasColumnName("announcement_id");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("change_type");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<long>("ChangedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("changed_by_user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("p_k_announcement_histories");

                    b.HasIndex("ChangedByUserId")
                        .HasDatabaseName("i_x_announcement_histories_changed_by_user_id");

                    b.HasIndex("AnnouncementId", "ChangedAt")
                        .HasDatabaseName("i_x_announcement_histories_announcement_id_changed_at");

                    b.ToTable("announcement_histories", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AnnouncementRead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint")
                        .HasColumnName("announcement_id");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_announcement_reads");

                    b.HasIndex("ReadAt")
                        .HasDatabaseName("i_x_announcement_reads_read_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_announcement_reads_user_id");

                    b.HasIndex("AnnouncementId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("i_x_announcement_reads_announcement_id_user_id");

                    b.ToTable("announcement_reads", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AnnouncementRecipient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint")
                        .HasColumnName("announcement_id");

                    b.Property<string>("PodmiotType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("podmiot_type");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("recipient_type");

                    b.Property<long?>("SupervisedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("supervised_entity_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_announcement_recipients");

                    b.HasIndex("SupervisedEntityId")
                        .HasDatabaseName("i_x_announcement_recipients_supervised_entity_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_announcement_recipients_user_id");

                    b.HasIndex("AnnouncementId", "RecipientType")
                        .HasDatabaseName("i_x_announcement_recipients_announcement_id_recipient_type");

                    b.ToTable("announcement_recipients", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("resource");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_audit_logs");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("i_x_audit_logs_timestamp");

                    b.HasIndex("Resource", "Action")
                        .HasDatabaseName("i_x_audit_logs_resource_action");

                    b.HasIndex("UserId", "Timestamp")
                        .HasDatabaseName("i_x_audit_logs_user_id_timestamp");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Case", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("case_number");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("HandlerId")
                        .HasColumnType("bigint")
                        .HasColumnName("handler_id");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cancelled");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resolved_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<long>("SupervisedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("supervised_entity_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_cases");

                    b.HasIndex("CaseNumber")
                        .IsUnique()
                        .HasDatabaseName("i_x_cases_case_number");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("i_x_cases_created_at");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("i_x_cases_created_by_user_id");

                    b.HasIndex("HandlerId")
                        .HasDatabaseName("i_x_cases_handler_id");

                    b.HasIndex("SupervisedEntityId", "Status")
                        .HasDatabaseName("i_x_cases_supervised_entity_id_status");

                    b.ToTable("cases", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.CaseDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("document_name");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.Property<long>("UploadedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_by_user_id");

                    b.HasKey("Id")
                        .HasName("p_k_case_documents");

                    b.HasIndex("CaseId")
                        .HasDatabaseName("i_x_case_documents_case_id");

                    b.HasIndex("UploadedByUserId")
                        .HasDatabaseName("i_x_case_documents_uploaded_by_user_id");

                    b.ToTable("case_documents", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.CaseHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("change_type");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<long>("ChangedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("changed_by_user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("NewStatus")
                        .HasColumnType("integer")
                        .HasColumnName("new_status");

                    b.Property<int?>("OldStatus")
                        .HasColumnType("integer")
                        .HasColumnName("old_status");

                    b.HasKey("Id")
                        .HasName("p_k_case_histories");

                    b.HasIndex("ChangedByUserId")
                        .HasDatabaseName("i_x_case_histories_changed_by_user_id");

                    b.HasIndex("CaseId", "ChangedAt")
                        .HasDatabaseName("i_x_case_histories_case_id_changed_at");

                    b.ToTable("case_histories", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Department")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("position");

                    b.Property<long?>("SupervisedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("supervised_entity_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_contacts");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("i_x_contacts_created_by_user_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("i_x_contacts_email");

                    b.HasIndex("SupervisedEntityId", "IsPrimary")
                        .HasDatabaseName("i_x_contacts_supervised_entity_id_is_primary");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.ContactGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("p_k_contact_groups");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("i_x_contact_groups_created_by_user_id");

                    b.ToTable("contact_groups", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.ContactGroupMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<long>("ContactGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("contact_group_id");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint")
                        .HasColumnName("contact_id");

                    b.HasKey("Id")
                        .HasName("p_k_contact_group_members");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("i_x_contact_group_members_contact_id");

                    b.HasIndex("ContactGroupId", "ContactId")
                        .IsUnique()
                        .HasDatabaseName("i_x_contact_group_members_contact_group_id_contact_id");

                    b.ToTable("contact_group_members", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FaqQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AnonymousEmail")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("anonymous_email");

                    b.Property<string>("AnonymousName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("anonymous_name");

                    b.Property<string>("AnswerContent")
                        .HasColumnType("text")
                        .HasColumnName("answer_content");

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("answered_at");

                    b.Property<long?>("AnsweredByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("answered_by_user_id");

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("numeric")
                        .HasColumnName("average_rating");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<int>("RatingCount")
                        .HasColumnType("integer")
                        .HasColumnName("rating_count");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<long?>("SubmittedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("submitted_by_user_id");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("title");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("view_count");

                    b.HasKey("Id")
                        .HasName("p_k_faq_questions");

                    b.HasIndex("AnsweredByUserId")
                        .HasDatabaseName("i_x_faq_questions_answered_by_user_id");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("i_x_faq_questions_published_at");

                    b.HasIndex("SubmittedAt")
                        .HasDatabaseName("i_x_faq_questions_submitted_at");

                    b.HasIndex("SubmittedByUserId")
                        .HasDatabaseName("i_x_faq_questions_submitted_by_user_id");

                    b.HasIndex("Status", "Category")
                        .HasDatabaseName("i_x_faq_questions_status_category");

                    b.ToTable("faq_questions", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FaqRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<long>("FaqQuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("faq_question_id");

                    b.Property<DateTime>("RatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rated_at");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_faq_ratings");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_faq_ratings_user_id");

                    b.HasIndex("FaqQuestionId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("i_x_faq_ratings_faq_question_id_user_id");

                    b.ToTable("faq_ratings", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FileLibrary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file_content");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.Property<long>("UploadedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_by_user_id");

                    b.HasKey("Id")
                        .HasName("p_k_file_libraries");

                    b.HasIndex("Category")
                        .HasDatabaseName("i_x_file_libraries_category");

                    b.HasIndex("UploadedAt")
                        .HasDatabaseName("i_x_file_libraries_uploaded_at");

                    b.HasIndex("UploadedByUserId")
                        .HasDatabaseName("i_x_file_libraries_uploaded_by_user_id");

                    b.ToTable("file_libraries", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FileLibraryPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanRead")
                        .HasColumnType("boolean")
                        .HasColumnName("can_read");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("boolean")
                        .HasColumnName("can_write");

                    b.Property<long>("FileLibraryId")
                        .HasColumnType("bigint")
                        .HasColumnName("file_library_id");

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("permission_type");

                    b.Property<string>("PodmiotType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("podmiot_type");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role_name");

                    b.Property<long?>("SupervisedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("supervised_entity_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_file_library_permissions");

                    b.HasIndex("SupervisedEntityId")
                        .HasDatabaseName("i_x_file_library_permissions_supervised_entity_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_file_library_permissions_user_id");

                    b.HasIndex("FileLibraryId", "PermissionType")
                        .HasDatabaseName("i_x_file_library_permissions_file_library_id_permission_type");

                    b.ToTable("file_library_permissions", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("folder");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cancelled");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<long?>("ParentMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_message_id");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<long?>("RecipientId")
                        .HasColumnType("bigint")
                        .HasColumnName("recipient_id");

                    b.Property<long?>("RelatedCaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("related_case_id");

                    b.Property<long?>("RelatedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("related_entity_id");

                    b.Property<long?>("RelatedReportId")
                        .HasColumnType("bigint")
                        .HasColumnName("related_report_id");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("subject");

                    b.Property<long?>("ThreadId")
                        .HasColumnType("bigint")
                        .HasColumnName("thread_id");

                    b.HasKey("Id")
                        .HasName("p_k_messages");

                    b.HasIndex("ParentMessageId")
                        .HasDatabaseName("i_x_messages_parent_message_id");

                    b.HasIndex("RelatedCaseId")
                        .HasDatabaseName("i_x_messages_related_case_id");

                    b.HasIndex("RelatedEntityId")
                        .HasDatabaseName("i_x_messages_related_entity_id");

                    b.HasIndex("RelatedReportId")
                        .HasDatabaseName("i_x_messages_related_report_id");

                    b.HasIndex("ThreadId")
                        .HasDatabaseName("i_x_messages_thread_id");

                    b.HasIndex("RecipientId", "IsRead")
                        .HasDatabaseName("i_x_messages_recipient_id_is_read");

                    b.HasIndex("SenderId", "SentAt")
                        .HasDatabaseName("i_x_messages_sender_id_sent_at");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.MessageAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file_content");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at");

                    b.Property<long>("UploadedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("uploaded_by_user_id");

                    b.HasKey("Id")
                        .HasName("p_k_message_attachments");

                    b.HasIndex("MessageId")
                        .HasDatabaseName("i_x_message_attachments_message_id");

                    b.HasIndex("UploadedByUserId")
                        .HasDatabaseName("i_x_message_attachments_uploaded_by_user_id");

                    b.ToTable("message_attachments", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password_hash");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_password_histories");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("i_x_password_histories_user_id_created_at");

                    b.ToTable("password_histories", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.PasswordPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpirationDays")
                        .HasColumnType("integer")
                        .HasColumnName("expiration_days");

                    b.Property<int>("HistoryCount")
                        .HasColumnType("integer")
                        .HasColumnName("history_count");

                    b.Property<int>("LockoutDurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("lockout_duration_minutes");

                    b.Property<int>("MaxFailedAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("max_failed_attempts");

                    b.Property<int>("MinLength")
                        .HasColumnType("integer")
                        .HasColumnName("min_length");

                    b.Property<bool>("RequireDigit")
                        .HasColumnType("boolean")
                        .HasColumnName("require_digit");

                    b.Property<bool>("RequireLowercase")
                        .HasColumnType("boolean")
                        .HasColumnName("require_lowercase");

                    b.Property<bool>("RequireSpecialChar")
                        .HasColumnType("boolean")
                        .HasColumnName("require_special_char");

                    b.Property<bool>("RequireUppercase")
                        .HasColumnType("boolean")
                        .HasColumnName("require_uppercase");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by_user_id");

                    b.HasKey("Id")
                        .HasName("p_k_password_policies");

                    b.HasIndex("UpdatedByUserId")
                        .HasDatabaseName("i_x_password_policies_updated_by_user_id");

                    b.ToTable("password_policies", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resource");

                    b.HasKey("Id")
                        .HasName("p_k_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_permissions_name");

                    b.HasIndex("Resource", "Action")
                        .IsUnique()
                        .HasDatabaseName("i_x_permissions_resource_action");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("replaced_by_token");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("revocation_reason");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_refresh_tokens");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("i_x_refresh_tokens_token");

                    b.HasIndex("UserId", "ExpiresAt")
                        .HasDatabaseName("i_x_refresh_tokens_user_id_expires_at");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ErrorDescription")
                        .HasColumnType("text")
                        .HasColumnName("error_description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsCorrection")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correction");

                    b.Property<long?>("OriginalReportId")
                        .HasColumnType("bigint")
                        .HasColumnName("original_report_id");

                    b.Property<string>("ReportNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("report_number");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("report_type");

                    b.Property<string>("ReportingPeriod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reporting_period");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<long>("SubmittedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("submitted_by_user_id");

                    b.Property<long>("SupervisedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("supervised_entity_id");

                    b.Property<DateTime?>("ValidatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validated_at");

                    b.Property<string>("ValidationResultPath")
                        .HasColumnType("text")
                        .HasColumnName("validation_result_path");

                    b.HasKey("Id")
                        .HasName("p_k_reports");

                    b.HasIndex("OriginalReportId")
                        .HasDatabaseName("i_x_reports_original_report_id");

                    b.HasIndex("ReportNumber")
                        .IsUnique()
                        .HasDatabaseName("i_x_reports_report_number");

                    b.HasIndex("SubmittedByUserId")
                        .HasDatabaseName("i_x_reports_submitted_by_user_id");

                    b.HasIndex("SupervisedEntityId")
                        .HasDatabaseName("i_x_reports_supervised_entity_id");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_role");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_roles_name");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("p_k_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("i_x_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.SupervisedEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("text")
                        .HasColumnName("apartment_number");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("building_number");

                    b.Property<string>("Category")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("entity_category");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("entity_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCrossBorder")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cross_border");

                    b.Property<string>("KRS")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("k_r_s");

                    b.Property<string>("LEI")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("l_e_i");

                    b.Property<string>("NIP")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("n_i_p");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("entity_name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("REGON")
                        .HasColumnType("text")
                        .HasColumnName("r_e_g_o_n");

                    b.Property<string>("RegistryNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("uknf_registry_number");

                    b.Property<string>("Sector")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("entity_sector");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("entity_status");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Subsector")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("entity_subsector");

                    b.Property<string>("UKNFCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("uknf_code");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("p_k_entities");

                    b.HasIndex("UKNFCode")
                        .IsUnique()
                        .HasDatabaseName("i_x_entities_uknf_code");

                    b.ToTable("entities", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_login_attempts");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_changed_at");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_until");

                    b.Property<string>("PESEL")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("pesel_masked");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("phone");

                    b.Property<bool>("RequirePasswordChange")
                        .HasColumnType("boolean")
                        .HasColumnName("require_password_change");

                    b.Property<long?>("SupervisedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("supervised_entity_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("i_x_users_email");

                    b.HasIndex("SupervisedEntityId")
                        .HasDatabaseName("i_x_users_supervised_entity_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.HasKey("UserId", "RoleId")
                        .HasName("p_k_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("i_x_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Announcement", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_announcements_users_created_by_user_id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AnnouncementAttachment", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Announcement", "Announcement")
                        .WithMany("Attachments")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_announcement_attachments_announcements_announcement_id");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AnnouncementHistory", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Announcement", "Announcement")
                        .WithMany("History")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_announcement_histories_announcements_announcement_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_announcement_histories_users_changed_by_user_id");

                    b.Navigation("Announcement");

                    b.Navigation("ChangedBy");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AnnouncementRead", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Announcement", "Announcement")
                        .WithMany("ReadConfirmations")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_announcement_reads_announcements_announcement_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_announcement_reads_users_user_id");

                    b.Navigation("Announcement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AnnouncementRecipient", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Announcement", "Announcement")
                        .WithMany("Recipients")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_announcement_recipients_announcements_announcement_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.SupervisedEntity", "SupervisedEntity")
                        .WithMany()
                        .HasForeignKey("SupervisedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_announcement_recipients_entities_supervised_entity_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_announcement_recipients_users_user_id");

                    b.Navigation("Announcement");

                    b.Navigation("SupervisedEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.AuditLog", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_audit_logs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Case", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_cases_users_created_by_user_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "Handler")
                        .WithMany()
                        .HasForeignKey("HandlerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_cases_users_handler_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.SupervisedEntity", "SupervisedEntity")
                        .WithMany()
                        .HasForeignKey("SupervisedEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_cases_entities_supervised_entity_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Handler");

                    b.Navigation("SupervisedEntity");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.CaseDocument", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Case", "Case")
                        .WithMany("Documents")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_case_documents_cases_case_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_case_documents_users_uploaded_by_user_id");

                    b.Navigation("Case");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.CaseHistory", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Case", "Case")
                        .WithMany("History")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_case_histories_cases_case_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_case_histories_users_changed_by_user_id");

                    b.Navigation("Case");

                    b.Navigation("ChangedBy");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Contact", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_contacts_users_created_by_user_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.SupervisedEntity", "SupervisedEntity")
                        .WithMany()
                        .HasForeignKey("SupervisedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_contacts_entities_supervised_entity_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("SupervisedEntity");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.ContactGroup", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_contact_groups_users_created_by_user_id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.ContactGroupMember", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.ContactGroup", "ContactGroup")
                        .WithMany("Members")
                        .HasForeignKey("ContactGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_contact_group_members_contact_groups_contact_group_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Contact", "Contact")
                        .WithMany("ContactGroupMemberships")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_contact_group_members_contacts_contact_id");

                    b.Navigation("Contact");

                    b.Navigation("ContactGroup");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FaqQuestion", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "AnsweredBy")
                        .WithMany()
                        .HasForeignKey("AnsweredByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_faq_questions_users_answered_by_user_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_faq_questions_users_submitted_by_user_id");

                    b.Navigation("AnsweredBy");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FaqRating", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.FaqQuestion", "FaqQuestion")
                        .WithMany("Ratings")
                        .HasForeignKey("FaqQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_faq_ratings_faq_questions_faq_question_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_faq_ratings_users_user_id");

                    b.Navigation("FaqQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FileLibrary", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_file_libraries_users_uploaded_by_user_id");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FileLibraryPermission", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.FileLibrary", "FileLibrary")
                        .WithMany("Permissions")
                        .HasForeignKey("FileLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_file_library_permissions_file_libraries_file_library_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.SupervisedEntity", "SupervisedEntity")
                        .WithMany()
                        .HasForeignKey("SupervisedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_file_library_permissions_entities_supervised_entity_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("f_k_file_library_permissions_users_user_id");

                    b.Navigation("FileLibrary");

                    b.Navigation("SupervisedEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Message", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Message", "ParentMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ParentMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("f_k_messages_messages_parent_message_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "Recipient")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("f_k_messages_users_recipient_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Case", "RelatedCase")
                        .WithMany("Messages")
                        .HasForeignKey("RelatedCaseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_messages_cases_related_case_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.SupervisedEntity", "RelatedEntity")
                        .WithMany()
                        .HasForeignKey("RelatedEntityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_messages_entities_related_entity_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Report", "RelatedReport")
                        .WithMany()
                        .HasForeignKey("RelatedReportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_messages_reports_related_report_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_messages_users_sender_id");

                    b.Navigation("ParentMessage");

                    b.Navigation("Recipient");

                    b.Navigation("RelatedCase");

                    b.Navigation("RelatedEntity");

                    b.Navigation("RelatedReport");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.MessageAttachment", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_message_attachments_messages_message_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_message_attachments_users_uploaded_by_user_id");

                    b.Navigation("Message");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.PasswordHistory", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "User")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_password_histories_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.PasswordPolicy", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_password_policies_users_updated_by_user_id");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Report", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Report", "OriginalReport")
                        .WithMany("Corrections")
                        .HasForeignKey("OriginalReportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_reports_reports_original_report_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "SubmittedBy")
                        .WithMany("Reports")
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_reports_users_submitted_by_user_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.SupervisedEntity", "SupervisedEntity")
                        .WithMany("Reports")
                        .HasForeignKey("SupervisedEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_reports_entities_supervised_entity_id");

                    b.Navigation("OriginalReport");

                    b.Navigation("SubmittedBy");

                    b.Navigation("SupervisedEntity");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.RolePermission", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_role_permissions_permissions_permission_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.User", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.SupervisedEntity", "SupervisedEntity")
                        .WithMany("Users")
                        .HasForeignKey("SupervisedEntityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_users_entities_supervised_entity_id");

                    b.Navigation("SupervisedEntity");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.UserRole", b =>
                {
                    b.HasOne("UknfCommunicationPlatform.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_user_roles_roles_role_id");

                    b.HasOne("UknfCommunicationPlatform.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Announcement", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("History");

                    b.Navigation("ReadConfirmations");

                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Case", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("History");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Contact", b =>
                {
                    b.Navigation("ContactGroupMemberships");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.ContactGroup", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FaqQuestion", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.FileLibrary", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Report", b =>
                {
                    b.Navigation("Corrections");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.SupervisedEntity", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UknfCommunicationPlatform.Core.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("PasswordHistories");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("Reports");

                    b.Navigation("SentMessages");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
